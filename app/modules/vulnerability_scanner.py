import nmap
from urllib.parse import urlparse
import socket
import logging
from app import socketio
from flask_socketio import emit

class VulnerabilityScanner:
    def __init__(self):
        self.scanner = nmap.PortScanner()
        self.logger = logging.getLogger(__name__)
    
    def emit_log(self, message):
        """Emit log message to connected clients"""
        try:
            socketio.emit('log_message', {'message': message})
        except Exception as e:
            self.logger.error(f"Error emitting log: {str(e)}")
    
    def _get_ip_from_url(self, url):
        """Extract IP from URL or domain"""
        parsed = urlparse(url)
        domain = parsed.netloc or parsed.path.split('/')[0]  # Handle cases without http://
        try:
            # Remove port number if present
            domain = domain.split(':')[0]
            self.emit_log(f"Resolving hostname: {domain}")
            ip = socket.gethostbyname(domain)
            self.emit_log(f"Resolved to IP: {ip}")
            return ip
        except socket.gaierror as e:
            self.logger.error(f"DNS resolution failed for {domain}: {e}")
            self.emit_log(f"Failed to resolve hostname: {domain}")
            return None

    def scan_target(self, target):
        """Perform vulnerability scan on target"""
        results = []
        self.emit_log(f"Starting vulnerability scan on {target}")
        
        # Clean up target input
        target = target.strip().lower()
        if not target:
            self.emit_log("Error: No target specified")
            return "Error: No target specified"
            
        # Extract IP from URL if needed
        if target.startswith(('http://', 'https://')):
            target_ip = self._get_ip_from_url(target)
            if not target_ip:
                return f"Error: Could not resolve hostname '{target}'"
            results.append(f"Resolved {target} to {target_ip}")
        else:
            target_ip = target
            
        try:
            # Use TCP connect scan (-sT) instead of SYN scan (-sS)
            # Also use version detection (-sV) but with light intensity (--version-intensity 2)
            scan_args = '-sT -sV --version-intensity 2 -Pn'
            self.emit_log("Initializing port scanner...")
            
            # Start the scan
            self.emit_log(f"Scanning ports on {target_ip}...")
            scan_results = self.scanner.scan(target_ip, '21-25,80,443,8080,8443', arguments=scan_args)
            
            if not scan_results.get('scan'):
                msg = f"No results: Host {target_ip} appears to be down or blocking our scans"
                self.emit_log(msg)
                return msg
                
            host_data = scan_results['scan'].get(target_ip, {})
            
            # Format results
            results.append(f"\nScan report for {target} ({target_ip})")
            results.append("=" * 50)
            results.append("PORT     STATE  SERVICE    VERSION")
            results.append("-" * 50)
            
            tcp_data = host_data.get('tcp', {})
            if not tcp_data:
                self.emit_log("No open ports found")
                results.append("No open ports found")
            else:
                for port, data in tcp_data.items():
                    state = data.get('state', 'unknown')
                    service = data.get('name', 'unknown')
                    version = data.get('version', '')
                    product = data.get('product', '')
                    version_info = f"{product} {version}".strip()
                    
                    port_result = f"{port:<8} {state:<6} {service:<10} {version_info}"
                    self.emit_log(f"Found: {port_result}")
                    results.append(port_result)
                    
                    # Add educational security notes
                    if state == 'open':
                        if service == 'ftp':
                            note = "    ! Check for anonymous FTP access"
                            self.emit_log(note)
                            results.append(note)
                        elif service == 'ssh':
                            note = "    ! Verify SSH version for CVEs"
                            self.emit_log(note)
                            results.append(note)
                        elif service in ['http', 'https']:
                            note = "    ! Check for common web vulnerabilities"
                            self.emit_log(note)
                            results.append(note)
            
            self.emit_log("Scan completed successfully")
            socketio.emit('scan_complete', {'message': 'Vulnerability scan completed'})
            return "\n".join(results)
            
        except nmap.PortScannerError as e:
            error_msg = f"Scan Error: {str(e)}"
            self.emit_log(error_msg)
            return error_msg
        except Exception as e:
            self.logger.error(f"Unexpected error during scan: {str(e)}")
            error_msg = f"Error: Scan failed unexpectedly. Check target and try again."
            self.emit_log(error_msg)
            return error_msg